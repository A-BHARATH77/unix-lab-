class Stats {
    private double average;
    private int min;
    private int max;
    public Stats(int[] numbers) {
        // Initialize the min and max values
        this.average = 0;
        this.min = numbers[0];
        this.max = numbers[0];
        // Create and start threads to calculate average, min, and max
        Thread avgt = new Avg(numbers, this);
        Thread mint = new Min(numbers, this);
        Thread maxt = new Max(numbers, this);
        avgt.start();
        mint.start();
        maxt.start();
        try {
            avgt.join();
            mint.join();
            maxt.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // Print the results
        System.out.println("The average value is " + average);
        System.out.println("The minimum value is " + min);
        System.out.println("The maximum value is " + max);
    }
    // Thread to calculate the average
    private static class Avg extends Thread {
        private int[] numbers;
        private Stats stats;
        public Avg(int[] numbers, Stats stats) {
            this.numbers = numbers;
            this.stats = stats;
        }
        @Override
        public void run() {
            int sum = 0;
            for (int num : numbers) {
                sum += num;
            }
            synchronized (stats) {
                stats.average = (double) sum / numbers.length;
            }
        }
    }
    // Thread to find the minimum value
    private static class Min extends Thread {
        private int[] numbers;
        private Stats stats;
        public Min(int[] numbers, Stats stats) {
            this.numbers = numbers;
            this.stats = stats;
        }
        @Override
        public void run() {
            int localMin = numbers[0];
            for (int num : numbers) {
                if (num < localMin) {
                    localMin = num;
                }
            }
            synchronized (stats) {
                stats.min = localMin;
            }
        }
    }
    // Thread to find the maximum value
    private static class Max extends Thread {
        private int[] numbers;
        private Stats stats;
        public Max(int[] numbers, Stats stats) {
            this.numbers = numbers;
            this.stats = stats;
        }
        @Override
        public void run() {
            int localMax = numbers[0];
            for (int num : numbers) {
                if (num > localMax) {
                    localMax = num;
                }
            }
            synchronized (stats) {
                stats.max = localMax;
            }
        }
    }
    public static void main(String[] args) {
        // Hardcoded numbers for demonstration
        int[] numbers = {10, 20, 5, 30, 15};
        new Stats(numbers);
    }
}



class Stock {
    private int items = 0;
    private final int CAPACITY = 10;
    // Method for adding stock
    public synchronized void addStock() throws InterruptedException {
        while (items == CAPACITY) {
            wait(); // Wait if stock is full
        }
        items++;
        System.out.println("Added stock. Items in stock: " + items);
        notify(); // Notify any waiting threads that stock has changed
    }
    // Method for getting stock
    public synchronized void getStock() throws InterruptedException {
        while (items == 0) {
            wait(); // Wait if stock is empty
        }
        items--;
        System.out.println("Removed stock. Items in stock: " + items);
        notify(); // Notify any waiting threads that stock has changed
    }
}
class Producer implements Runnable {
    private final Stock stock;
    private volatile boolean running = true; // Flag to control the thread
    public Producer(Stock stock) {
        this.stock = stock;
    }
    public void stop() {
        running = false; // Method to stop the thread
    }
    @Override
    public void run() {
        try {
            while (running) {
                stock.addStock();
                Thread.sleep(1000); // Simulate time taken to produce
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Restore interrupted status
        }
    }
}
class Consumer implements Runnable {
    private final Stock stock;
    private volatile boolean running = true; // Flag to control the thread
    public Consumer(Stock stock) {
        this.stock = stock;
    }
    public void stop() {
        running = false; // Method to stop the thread
    }
    @Override
    public void run() {
        try {
            while (running) {
                stock.getStock();
                Thread.sleep(1500); // Simulate time taken to consume
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // Restore interrupted status
        }
    }
}
public class MyThread6 {
    public static void main(String[] args) {
        Stock stock = new Stock(); // Create a shared stock instance
        Producer producer = new Producer(stock); // Create producer
        Consumer consumer = new Consumer(stock); // Create consumer
        Thread producerThread = new Thread(producer); // Create producer thread
        Thread consumerThread = new Thread(consumer); // Create consumer thread
        producerThread.start(); // Start producer thread
        consumerThread.start(); // Start consumer thread
        // Run the threads for a while and then stop them
        try {
            Thread.sleep(10000); // Let them run for 10 seconds
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        producer.stop(); // Stop producer
        consumer.stop(); // Stop consumer
        // Optionally, wait for threads to finish
        try {
            producerThread.join();
            consumerThread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Producer and Consumer have stopped.");
    }
}




import java.util.HashMap;
import java.util.Map;
class FrequencyCounter extends Thread {
    private String text;
    private Map<Character, Integer> frequencyMap;
    public FrequencyCounter(String text) {
        this.text = text;
        this.frequencyMap = new HashMap<>();
    }
    @Override
    public void run() {
        for (char c : text.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
    }
    public Map<Character, Integer> getFrequencyMap() {
        return frequencyMap;
    }
}
public class Thread7 {
    public static void main(String[] args) {
// Hardcoded example texts for demonstration
        String[] texts = {
                "hello world",
                "java programming",
                "thread example",
                "frequency count",
                "online compiler"
        };
        int numberOfCounters = texts.length; // Number of text counters based on thelength of texts array
        FrequencyCounter[] counters = new FrequencyCounter[numberOfCounters];
        for (int i = 0; i < numberOfCounters; i++) {
            counters[i] = new FrequencyCounter(texts[i]);
            counters[i].start();
        }
        for (int i = 0; i < numberOfCounters; i++) {
            try {
                counters[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        for (int i = 0; i < numberOfCounters; i++) {
            System.out.println("Counter " + (i + 1) + " Result:");
            for (Map.Entry<Character, Integer> entry :
                    counters[i].getFrequencyMap().entrySet()) {
                System.out.print(entry.getKey() + ":" + entry.getValue() + " ");
            }
            System.out.println();
        }
    }
}
 
